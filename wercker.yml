box: "node:6.10"
build: 
  steps: 
    - 
      script: 
        code: "npm install"
        name: "A step that executes `npm install` command"
deploy-to-oke: 
  box: 
    cmd: /bin/sh
    id: alpine
  steps: 
    - bash-template
    - 
      script: 
        code: "cat kubernetes-deployment.yml"
        name: "Visualise Kubernetes config"
    - 
      kubectl: 
        command: "delete namespace $WERCKER_APPLICATION_OWNER_NAME --ignore-not-found=true"
        insecure-skip-tls-verify: true
        name: "delete namespace"
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
    - 
      script: 
        code: "sleep 60"
        name: "wait to delete namespace"
    - 
      kubectl: 
        command: "create namespace $WERCKER_APPLICATION_OWNER_NAME"
        insecure-skip-tls-verify: true
        name: "create namespace"
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
    - 
      script: 
        code: "sleep 10"
        name: "wait to create namespace"
    - 
      kubectl: 
        command: "create secret docker-registry wrelease --docker-server=wcr.io --docker-username=$WERCKER_APPLICATION_OWNER_NAME --docker-password=$KUBERNETES_TOKEN --docker-email=${WERCKER_APPLICATION_OWNER_NAME}@mail.com --namespace=$WERCKER_APPLICATION_OWNER_NAME; echo 'secret step'"
        insecure-skip-tls-verify: true
        name: "create OCR secret"
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
    - 
      kubectl: 
        command: "apply -f $WERCKER_ROOT/kubernetes-deployment.yml --namespace=$WERCKER_APPLICATION_OWNER_NAME"
        insecure-skip-tls-verify: true
        name: "create deplyoment"
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
    - 
      script: 
        code: "cat ingress.yml"
        name: "Visualise Ingress config"
    - 
      kubectl: 
        command: "apply -f $WERCKER_ROOT/ingress.yml --namespace=$WERCKER_APPLICATION_OWNER_NAME"
        insecure-skip-tls-verify: true
        name: "create Ingress configuration"
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
    - 
      kubectl: 
        command: "get svc -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' --all-namespaces"
        insecure-skip-tls-verify: true
        name: "get LoadBalancer public IP address"
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
push-to-releases: 
  steps: 
    - 
      internal/docker-push: 
        cmd: "node /pipeline/source/app.js"
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
rest-functional-test: 
  steps: 
    - 
      script: 
        code: |
            mkdir -p "/pipeline"
            node $WERCKER_ROOT/app.js &
            sleep 2
            CREDITSCORE_URL=http://localhost:3000/creditscore
            echo 'Microservice URL=' $CREDITSCORE_URL
            if curl -X POST -H "Content-Type: application/json" -X POST -d '{"firstname":"John","lastname":"Doe","dateofbirth":"01/01/2015","ssn":"111223333"}' $CREDITSCORE_URL | grep "firstname"
            then
                # if the keyword is in the conent
                echo "Test passed"
            else
                echo "Test failed"
                exit -1
            fi
        name: "Test Microservice"
ui-functional-test: 
  box: 
    id: "peternagy/chrome-protractor-headless-test:node9.2-chrome62"
  steps: 
    - 
      script: 
        code: "nohup node $WERCKER_ROOT/app.js > creditscoreapp.log &\n\
            echo 'Application URL to test: http://localhost:3000/creditscore'\n\
            protractor $WERCKER_ROOT/test/protractor.conf.js\n\
            exit_status=$?\n\
            echo 'CreditScore app server log :::START'\n\
            cat creditscoreapp.log\n\
            echo 'CreditScore app server log :::END'\n\
            if [ $exit_status -eq 0 ]; then\n\
            \x20 echo \"UI test passed\"\n\
            else\n\
            \x20 echo \"UI test failed\"\n\
            \x20 exit -1\n\
            fi                "
        name: "Run UI test"
